# -*- coding: utf-8 -*-
"""Malware Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-eP1uVhBT_7MfQ29xrGCLtX_zbeTTBsk

# Task 1: Split the byte and ASM files in the path to reduce confusion (Please note to default the training dataset)
"""

import os
import shutil

#Define paths
pathRoot = r"E:\ML Kaggle dataset\malware-classification\train\train"   #Please replace with the root path
pathDestinationByte = r"E:\ML Kaggle dataset\malware-classification\train\train\Byte Data" #Please replace with the Byte path
pathDestinationASM = r"E:\ML Kaggle dataset\malware-classification\train\train\ASM Data" #Please replace with the ASM path

# Check if the path exists
if not os.path.exists(pathDestinationByte): # If it doesn't exist, create the directory
    os.makedirs(pathDestinationByte)
if not os.path.exists(pathDestinationASM): # If it doesn't exist, create the directory
    os.makedirs(pathDestinationASM)

if os.path.exists(pathRoot):
    files = os.listdir(pathRoot)           # List all files in the source directory
    asm_files = [f for f in files if f.endswith('.asm')]  # Filter out the .asm files
    byte_files = [f for f in files if f.endswith('.bytes')]
    # Check if .asm files are found
    count_asm = 0
    count_byte = 0
    if asm_files:
        for file in asm_files:
            file_path = os.path.join(pathRoot, file)
            destination_path = os.path.join(pathDestinationASM, file)
            shutil.move(file_path, pathDestinationASM)
            count_asm += 1
    if byte_files:
        for file in byte_files:
            file_path = os.path.join(pathRoot, file)
            destination_path = os.path.join(pathDestinationByte, file)
            shutil.move(file_path, pathDestinationByte)
            count_byte += 1
    print("Successfully transfered " + str(count_asm) + " asm and " + str(count_byte) + " byte files.")

"""# Task 2: Check the distribution of overall data"""

import pandas as pd
import matplotlib.pyplot as plt

pathLabel = r"E:\ML Kaggle dataset\malware-classification\trainLabels.csv"  #Please define your own path
dfLabel = pd.read_csv(pathLabel)

# Plotting a histogram
plt.figure(figsize=(8, 6))
plt.hist(dfLabel['Class'], bins=9, color='skyblue', edgecolor='black')  # Adjust the number of bins as needed
plt.title('Distribution of Data for Malware Classes')
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# Plotting a density plot (Kernel Density Estimate)
plt.figure(figsize=(8, 6))
dfLabel['Class'].plot(kind='density', color='orange')
plt.title('Density Plot of Malware Classes')
plt.xlabel('Values')
plt.ylabel('Density')
plt.grid(True)
plt.show()

import shutil
import os
import pandas as pd
import matplotlib
matplotlib.use(u'nbAgg')
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

"""# Read Input File for Byte"""

file = r"C:\Users\ashut\Desktop\Machine Learning\Input\result_with_size.csv"
byte_feature_all = pd.read_csv(file)

byte_feature_all.head()

"""# Split dataset to Train Test for Byte"""

from sklearn.model_selection import train_test_split

data_y = byte_feature_all['Class']
X_train, X_test, y_train, y_test = train_test_split(byte_feature_all.drop(['ID','Class'], axis=1), data_y,stratify=data_y,test_size=0.20)

"""# Model Building </br> </br>
## 1- Random Forest
"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

random_forest = RandomForestClassifier(n_estimators=100, random_state=42)

# Fitting the model to the training data
random_forest.fit(X_train, y_train)

# Making predictions on the test set
predictions = random_forest.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

from sklearn.metrics import classification_report

report = classification_report(y_test, predictions)
print("Classification Report:")
print(report)

from sklearn.metrics import confusion_matrix
# Generating the confusion matrix
conf_matrix = confusion_matrix(y_test, predictions)

# Displaying the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title('Confusion Matrix')
plt.show()

"""## 2- SVM"""

from sklearn import svm
SVM_model = svm.SVC(kernel='rbf')
SVM_model.fit(X_train, y_train)
predictions = SVM_model.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

from sklearn.metrics import classification_report

report = classification_report(y_test, predictions)
print("Classification Report:")
print(report)

from sklearn.metrics import confusion_matrix
# Generating the confusion matrix
conf_matrix = confusion_matrix(y_test, predictions)

# Displaying the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title('Confusion Matrix')
plt.show()

"""## 3- Decision Tree"""

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Creating the Decision Tree model
decision_tree = DecisionTreeClassifier(random_state=42,max_depth=10)

# Fitting the model to the training data
decision_tree.fit(X_train, y_train)

# Making predictions on the test set
predictions = decision_tree.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

from sklearn.metrics import classification_report

report = classification_report(y_test, predictions)
print("Classification Report:")
print(report)

from sklearn.metrics import confusion_matrix
# Generating the confusion matrix
conf_matrix = confusion_matrix(y_test, predictions)

# Displaying the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title('Confusion Matrix')
plt.show()

"""## 4- Logistic Regression"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

logistic_regression = LogisticRegression(max_iter=1000, random_state=42)
#logistic_regression = LogisticRegression(random_state=42)

# Fitting the model to the training data
logistic_regression.fit(X_train, y_train)

# Making predictions on the test set
predictions = logistic_regression.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

from sklearn.metrics import classification_report

report = classification_report(y_test, predictions)
print("Classification Report:")
print(report)

from sklearn.metrics import confusion_matrix
# Generating the confusion matrix
conf_matrix = confusion_matrix(y_test, predictions)

# Displaying the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues",
            xticklabels=['Predicted Negative', 'Predicted Positive'],
            yticklabels=['Actual Negative', 'Actual Positive'])
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

"""## 5- Gradient Boosting"""

from sklearn.ensemble import GradientBoostingClassifier
GB_model= GradientBoostingClassifier(n_estimators=50)
GB_model.fit(X_train,y_train)

# Making predictions on the test set
predictions = GB_model.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

from sklearn.metrics import classification_report

report = classification_report(y_test, predictions)
print("Classification Report:")
print(report)

from sklearn.metrics import confusion_matrix
# Generating the confusion matrix
conf_matrix = confusion_matrix(y_test, predictions)

# Displaying the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title('Confusion Matrix')
plt.show()

"""# Read Input File for ASM

"""

f2 = r"C:\Users\ashut\Desktop\Machine Learning\Input\ASM_extracted.csv"
dfasm = pd.read_csv(f2)

dfasm.head()

dfLabel.rename(columns={'Id': 'ID'}, inplace=True)

dfasm = dfasm.merge(dfLabel, on='ID')

data_y = dfasm['Class']
X_train, X_test, y_train, y_test = train_test_split(dfasm.drop(['ID','Class'], axis=1), data_y,stratify=data_y,test_size=0.20)

"""# Model Building </br> </br>
## 1- Random Forest
"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

random_forest = RandomForestClassifier(n_estimators=100, random_state=42)

# Fitting the model to the training data
random_forest.fit(X_train, y_train)

# Making predictions on the test set
predictions = random_forest.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

from sklearn.metrics import confusion_matrix
# Generating the confusion matrix
conf_matrix = confusion_matrix(y_test, predictions)

# Displaying the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title('Confusion Matrix')
plt.show()

"""## 2- SVM"""

from sklearn import svm
SVM_model = svm.SVC(kernel='rbf')
SVM_model.fit(X_train, y_train)
predictions = SVM_model.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

from sklearn.metrics import confusion_matrix
# Generating the confusion matrix
conf_matrix = confusion_matrix(y_test, predictions)

# Displaying the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title('Confusion Matrix')
plt.show()

"""## 3- Decision Tree"""

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Creating the Decision Tree model
decision_tree = DecisionTreeClassifier(random_state=42,max_depth=10)

# Fitting the model to the training data
decision_tree.fit(X_train, y_train)

# Making predictions on the test set
predictions = decision_tree.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

from sklearn.metrics import confusion_matrix
# Generating the confusion matrix
conf_matrix = confusion_matrix(y_test, predictions)

# Displaying the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title('Confusion Matrix')
plt.show()

"""## 4- Logistic Regression"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

logistic_regression = LogisticRegression(max_iter=1000, random_state=42)
#logistic_regression = LogisticRegression(random_state=42)

# Fitting the model to the training data
logistic_regression.fit(X_train, y_train)

# Making predictions on the test set
predictions = logistic_regression.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

from sklearn.metrics import confusion_matrix
# Generating the confusion matrix
conf_matrix = confusion_matrix(y_test, predictions)

# Displaying the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title('Confusion Matrix')
plt.show()

"""## 5- Gradient Boosting"""

from sklearn.ensemble import GradientBoostingClassifier
GB_model= GradientBoostingClassifier(n_estimators=50)
GB_model.fit(X_train,y_train)

# Making predictions on the test set
predictions = GB_model.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

from sklearn.metrics import confusion_matrix
# Generating the confusion matrix
conf_matrix = confusion_matrix(y_test, predictions)

# Displaying the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title('Confusion Matrix')
plt.show()